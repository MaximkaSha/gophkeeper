// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: internal/proto/gophkeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GophkeeperClient is the client API for Gophkeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophkeeperClient interface {
	AddCipheredData(ctx context.Context, in *AddCipheredDataRequest, opts ...grpc.CallOption) (*AddCipheredDataResponse, error)
	GetCipheredDataForUserRequest(ctx context.Context, in *GetCipheredDataRequest, opts ...grpc.CallOption) (*GetCipheredDataResponse, error)
	DelCipheredData(ctx context.Context, in *DelCipheredDataRequest, opts ...grpc.CallOption) (*DelCiphereDataResponse, error)
}

type gophkeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGophkeeperClient(cc grpc.ClientConnInterface) GophkeeperClient {
	return &gophkeeperClient{cc}
}

func (c *gophkeeperClient) AddCipheredData(ctx context.Context, in *AddCipheredDataRequest, opts ...grpc.CallOption) (*AddCipheredDataResponse, error) {
	out := new(AddCipheredDataResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/AddCipheredData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetCipheredDataForUserRequest(ctx context.Context, in *GetCipheredDataRequest, opts ...grpc.CallOption) (*GetCipheredDataResponse, error) {
	out := new(GetCipheredDataResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetCipheredDataForUserRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) DelCipheredData(ctx context.Context, in *DelCipheredDataRequest, opts ...grpc.CallOption) (*DelCiphereDataResponse, error) {
	out := new(DelCiphereDataResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/DelCipheredData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophkeeperServer is the server API for Gophkeeper service.
// All implementations must embed UnimplementedGophkeeperServer
// for forward compatibility
type GophkeeperServer interface {
	AddCipheredData(context.Context, *AddCipheredDataRequest) (*AddCipheredDataResponse, error)
	GetCipheredDataForUserRequest(context.Context, *GetCipheredDataRequest) (*GetCipheredDataResponse, error)
	DelCipheredData(context.Context, *DelCipheredDataRequest) (*DelCiphereDataResponse, error)
	mustEmbedUnimplementedGophkeeperServer()
}

// UnimplementedGophkeeperServer must be embedded to have forward compatible implementations.
type UnimplementedGophkeeperServer struct {
}

func (UnimplementedGophkeeperServer) AddCipheredData(context.Context, *AddCipheredDataRequest) (*AddCipheredDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCipheredData not implemented")
}
func (UnimplementedGophkeeperServer) GetCipheredDataForUserRequest(context.Context, *GetCipheredDataRequest) (*GetCipheredDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCipheredDataForUserRequest not implemented")
}
func (UnimplementedGophkeeperServer) DelCipheredData(context.Context, *DelCipheredDataRequest) (*DelCiphereDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCipheredData not implemented")
}
func (UnimplementedGophkeeperServer) mustEmbedUnimplementedGophkeeperServer() {}

// UnsafeGophkeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophkeeperServer will
// result in compilation errors.
type UnsafeGophkeeperServer interface {
	mustEmbedUnimplementedGophkeeperServer()
}

func RegisterGophkeeperServer(s grpc.ServiceRegistrar, srv GophkeeperServer) {
	s.RegisterService(&Gophkeeper_ServiceDesc, srv)
}

func _Gophkeeper_AddCipheredData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCipheredDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).AddCipheredData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/AddCipheredData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).AddCipheredData(ctx, req.(*AddCipheredDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetCipheredDataForUserRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCipheredDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetCipheredDataForUserRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetCipheredDataForUserRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetCipheredDataForUserRequest(ctx, req.(*GetCipheredDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_DelCipheredData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCipheredDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).DelCipheredData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/DelCipheredData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).DelCipheredData(ctx, req.(*DelCipheredDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gophkeeper_ServiceDesc is the grpc.ServiceDesc for Gophkeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gophkeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Gophkeeper",
	HandlerType: (*GophkeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCipheredData",
			Handler:    _Gophkeeper_AddCipheredData_Handler,
		},
		{
			MethodName: "GetCipheredDataForUserRequest",
			Handler:    _Gophkeeper_GetCipheredDataForUserRequest_Handler,
		},
		{
			MethodName: "DelCipheredData",
			Handler:    _Gophkeeper_DelCipheredData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/gophkeeper.proto",
}
