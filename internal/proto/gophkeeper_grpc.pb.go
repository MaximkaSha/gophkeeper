// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: internal/proto/gophkeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GophkeeperClient is the client API for Gophkeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophkeeperClient interface {
	// Password group.
	AddPassword(ctx context.Context, in *AddPasswordRequest, opts ...grpc.CallOption) (*AddPasswordResponse, error)
	GetPassword(ctx context.Context, in *GetPasswordRequest, opts ...grpc.CallOption) (*GetPasswordResponse, error)
	DelPassword(ctx context.Context, in *DelPasswordRequest, opts ...grpc.CallOption) (*DelPasswordResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	GetAllPassword(ctx context.Context, in *GetAllPasswordRequest, opts ...grpc.CallOption) (*GetAllPasswordResponse, error)
	// Data group.
	AddData(ctx context.Context, in *AddDataRequest, opts ...grpc.CallOption) (*AddDataResponse, error)
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	DelData(ctx context.Context, in *DelDataRequest, opts ...grpc.CallOption) (*DelDataResponse, error)
	UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*UpdateDataResponse, error)
	GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...grpc.CallOption) (*GetAllDataResponse, error)
	// Text group.
	AddText(ctx context.Context, in *AddTextRequest, opts ...grpc.CallOption) (*AddTextResponse, error)
	GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResponse, error)
	DelText(ctx context.Context, in *DelTextRequest, opts ...grpc.CallOption) (*DelTextResponse, error)
	UpdateText(ctx context.Context, in *UpdateTextRequest, opts ...grpc.CallOption) (*UpdateTextResponse, error)
	GetAllText(ctx context.Context, in *GetAllTextRequest, opts ...grpc.CallOption) (*GetAllTextResponse, error)
	// CreditCard group.
	AddCreditCard(ctx context.Context, in *AddCreditCardRequest, opts ...grpc.CallOption) (*AddCreditCardResponse, error)
	GetCreditCard(ctx context.Context, in *GetCreditCardRequest, opts ...grpc.CallOption) (*GetCreditCardResponse, error)
	DelCreditCard(ctx context.Context, in *DelCreditCardRequest, opts ...grpc.CallOption) (*DelCreditCardResponse, error)
	UpdateCreditCard(ctx context.Context, in *UpdateCreditCardRequest, opts ...grpc.CallOption) (*UpdateCreditCardResponse, error)
	GetAllCreditCard(ctx context.Context, in *GetAllCreditCardRequest, opts ...grpc.CallOption) (*GetAllCreditCardResponse, error)
}

type gophkeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGophkeeperClient(cc grpc.ClientConnInterface) GophkeeperClient {
	return &gophkeeperClient{cc}
}

func (c *gophkeeperClient) AddPassword(ctx context.Context, in *AddPasswordRequest, opts ...grpc.CallOption) (*AddPasswordResponse, error) {
	out := new(AddPasswordResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/AddPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetPassword(ctx context.Context, in *GetPasswordRequest, opts ...grpc.CallOption) (*GetPasswordResponse, error) {
	out := new(GetPasswordResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) DelPassword(ctx context.Context, in *DelPasswordRequest, opts ...grpc.CallOption) (*DelPasswordResponse, error) {
	out := new(DelPasswordResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/DelPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetAllPassword(ctx context.Context, in *GetAllPasswordRequest, opts ...grpc.CallOption) (*GetAllPasswordResponse, error) {
	out := new(GetAllPasswordResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetAllPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) AddData(ctx context.Context, in *AddDataRequest, opts ...grpc.CallOption) (*AddDataResponse, error) {
	out := new(AddDataResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/AddData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) DelData(ctx context.Context, in *DelDataRequest, opts ...grpc.CallOption) (*DelDataResponse, error) {
	out := new(DelDataResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/DelData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*UpdateDataResponse, error) {
	out := new(UpdateDataResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/UpdateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...grpc.CallOption) (*GetAllDataResponse, error) {
	out := new(GetAllDataResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetAllData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) AddText(ctx context.Context, in *AddTextRequest, opts ...grpc.CallOption) (*AddTextResponse, error) {
	out := new(AddTextResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/AddText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResponse, error) {
	out := new(GetTextResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) DelText(ctx context.Context, in *DelTextRequest, opts ...grpc.CallOption) (*DelTextResponse, error) {
	out := new(DelTextResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/DelText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) UpdateText(ctx context.Context, in *UpdateTextRequest, opts ...grpc.CallOption) (*UpdateTextResponse, error) {
	out := new(UpdateTextResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/UpdateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetAllText(ctx context.Context, in *GetAllTextRequest, opts ...grpc.CallOption) (*GetAllTextResponse, error) {
	out := new(GetAllTextResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetAllText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) AddCreditCard(ctx context.Context, in *AddCreditCardRequest, opts ...grpc.CallOption) (*AddCreditCardResponse, error) {
	out := new(AddCreditCardResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/AddCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetCreditCard(ctx context.Context, in *GetCreditCardRequest, opts ...grpc.CallOption) (*GetCreditCardResponse, error) {
	out := new(GetCreditCardResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) DelCreditCard(ctx context.Context, in *DelCreditCardRequest, opts ...grpc.CallOption) (*DelCreditCardResponse, error) {
	out := new(DelCreditCardResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/DelCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) UpdateCreditCard(ctx context.Context, in *UpdateCreditCardRequest, opts ...grpc.CallOption) (*UpdateCreditCardResponse, error) {
	out := new(UpdateCreditCardResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/UpdateCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetAllCreditCard(ctx context.Context, in *GetAllCreditCardRequest, opts ...grpc.CallOption) (*GetAllCreditCardResponse, error) {
	out := new(GetAllCreditCardResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Gophkeeper/GetAllCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophkeeperServer is the server API for Gophkeeper service.
// All implementations must embed UnimplementedGophkeeperServer
// for forward compatibility
type GophkeeperServer interface {
	// Password group.
	AddPassword(context.Context, *AddPasswordRequest) (*AddPasswordResponse, error)
	GetPassword(context.Context, *GetPasswordRequest) (*GetPasswordResponse, error)
	DelPassword(context.Context, *DelPasswordRequest) (*DelPasswordResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	GetAllPassword(context.Context, *GetAllPasswordRequest) (*GetAllPasswordResponse, error)
	// Data group.
	AddData(context.Context, *AddDataRequest) (*AddDataResponse, error)
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	DelData(context.Context, *DelDataRequest) (*DelDataResponse, error)
	UpdateData(context.Context, *UpdateDataRequest) (*UpdateDataResponse, error)
	GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataResponse, error)
	// Text group.
	AddText(context.Context, *AddTextRequest) (*AddTextResponse, error)
	GetText(context.Context, *GetTextRequest) (*GetTextResponse, error)
	DelText(context.Context, *DelTextRequest) (*DelTextResponse, error)
	UpdateText(context.Context, *UpdateTextRequest) (*UpdateTextResponse, error)
	GetAllText(context.Context, *GetAllTextRequest) (*GetAllTextResponse, error)
	// CreditCard group.
	AddCreditCard(context.Context, *AddCreditCardRequest) (*AddCreditCardResponse, error)
	GetCreditCard(context.Context, *GetCreditCardRequest) (*GetCreditCardResponse, error)
	DelCreditCard(context.Context, *DelCreditCardRequest) (*DelCreditCardResponse, error)
	UpdateCreditCard(context.Context, *UpdateCreditCardRequest) (*UpdateCreditCardResponse, error)
	GetAllCreditCard(context.Context, *GetAllCreditCardRequest) (*GetAllCreditCardResponse, error)
	mustEmbedUnimplementedGophkeeperServer()
}

// UnimplementedGophkeeperServer must be embedded to have forward compatible implementations.
type UnimplementedGophkeeperServer struct {
}

func (UnimplementedGophkeeperServer) AddPassword(context.Context, *AddPasswordRequest) (*AddPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPassword not implemented")
}
func (UnimplementedGophkeeperServer) GetPassword(context.Context, *GetPasswordRequest) (*GetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedGophkeeperServer) DelPassword(context.Context, *DelPasswordRequest) (*DelPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPassword not implemented")
}
func (UnimplementedGophkeeperServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedGophkeeperServer) GetAllPassword(context.Context, *GetAllPasswordRequest) (*GetAllPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPassword not implemented")
}
func (UnimplementedGophkeeperServer) AddData(context.Context, *AddDataRequest) (*AddDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddData not implemented")
}
func (UnimplementedGophkeeperServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedGophkeeperServer) DelData(context.Context, *DelDataRequest) (*DelDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelData not implemented")
}
func (UnimplementedGophkeeperServer) UpdateData(context.Context, *UpdateDataRequest) (*UpdateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedGophkeeperServer) GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllData not implemented")
}
func (UnimplementedGophkeeperServer) AddText(context.Context, *AddTextRequest) (*AddTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddText not implemented")
}
func (UnimplementedGophkeeperServer) GetText(context.Context, *GetTextRequest) (*GetTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedGophkeeperServer) DelText(context.Context, *DelTextRequest) (*DelTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelText not implemented")
}
func (UnimplementedGophkeeperServer) UpdateText(context.Context, *UpdateTextRequest) (*UpdateTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateText not implemented")
}
func (UnimplementedGophkeeperServer) GetAllText(context.Context, *GetAllTextRequest) (*GetAllTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllText not implemented")
}
func (UnimplementedGophkeeperServer) AddCreditCard(context.Context, *AddCreditCardRequest) (*AddCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCreditCard not implemented")
}
func (UnimplementedGophkeeperServer) GetCreditCard(context.Context, *GetCreditCardRequest) (*GetCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditCard not implemented")
}
func (UnimplementedGophkeeperServer) DelCreditCard(context.Context, *DelCreditCardRequest) (*DelCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCreditCard not implemented")
}
func (UnimplementedGophkeeperServer) UpdateCreditCard(context.Context, *UpdateCreditCardRequest) (*UpdateCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreditCard not implemented")
}
func (UnimplementedGophkeeperServer) GetAllCreditCard(context.Context, *GetAllCreditCardRequest) (*GetAllCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCreditCard not implemented")
}
func (UnimplementedGophkeeperServer) mustEmbedUnimplementedGophkeeperServer() {}

// UnsafeGophkeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophkeeperServer will
// result in compilation errors.
type UnsafeGophkeeperServer interface {
	mustEmbedUnimplementedGophkeeperServer()
}

func RegisterGophkeeperServer(s grpc.ServiceRegistrar, srv GophkeeperServer) {
	s.RegisterService(&Gophkeeper_ServiceDesc, srv)
}

func _Gophkeeper_AddPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).AddPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/AddPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).AddPassword(ctx, req.(*AddPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetPassword(ctx, req.(*GetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_DelPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).DelPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/DelPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).DelPassword(ctx, req.(*DelPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetAllPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetAllPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetAllPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetAllPassword(ctx, req.(*GetAllPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_AddData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).AddData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/AddData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).AddData(ctx, req.(*AddDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_DelData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).DelData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/DelData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).DelData(ctx, req.(*DelDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/UpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).UpdateData(ctx, req.(*UpdateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetAllData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetAllData(ctx, req.(*GetAllDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_AddText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).AddText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/AddText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).AddText(ctx, req.(*AddTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetText(ctx, req.(*GetTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_DelText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).DelText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/DelText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).DelText(ctx, req.(*DelTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_UpdateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).UpdateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/UpdateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).UpdateText(ctx, req.(*UpdateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetAllText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetAllText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetAllText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetAllText(ctx, req.(*GetAllTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_AddCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).AddCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/AddCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).AddCreditCard(ctx, req.(*AddCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetCreditCard(ctx, req.(*GetCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_DelCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).DelCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/DelCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).DelCreditCard(ctx, req.(*DelCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_UpdateCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).UpdateCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/UpdateCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).UpdateCreditCard(ctx, req.(*UpdateCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetAllCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetAllCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Gophkeeper/GetAllCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetAllCreditCard(ctx, req.(*GetAllCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gophkeeper_ServiceDesc is the grpc.ServiceDesc for Gophkeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gophkeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Gophkeeper",
	HandlerType: (*GophkeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPassword",
			Handler:    _Gophkeeper_AddPassword_Handler,
		},
		{
			MethodName: "GetPassword",
			Handler:    _Gophkeeper_GetPassword_Handler,
		},
		{
			MethodName: "DelPassword",
			Handler:    _Gophkeeper_DelPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Gophkeeper_UpdatePassword_Handler,
		},
		{
			MethodName: "GetAllPassword",
			Handler:    _Gophkeeper_GetAllPassword_Handler,
		},
		{
			MethodName: "AddData",
			Handler:    _Gophkeeper_AddData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _Gophkeeper_GetData_Handler,
		},
		{
			MethodName: "DelData",
			Handler:    _Gophkeeper_DelData_Handler,
		},
		{
			MethodName: "UpdateData",
			Handler:    _Gophkeeper_UpdateData_Handler,
		},
		{
			MethodName: "GetAllData",
			Handler:    _Gophkeeper_GetAllData_Handler,
		},
		{
			MethodName: "AddText",
			Handler:    _Gophkeeper_AddText_Handler,
		},
		{
			MethodName: "GetText",
			Handler:    _Gophkeeper_GetText_Handler,
		},
		{
			MethodName: "DelText",
			Handler:    _Gophkeeper_DelText_Handler,
		},
		{
			MethodName: "UpdateText",
			Handler:    _Gophkeeper_UpdateText_Handler,
		},
		{
			MethodName: "GetAllText",
			Handler:    _Gophkeeper_GetAllText_Handler,
		},
		{
			MethodName: "AddCreditCard",
			Handler:    _Gophkeeper_AddCreditCard_Handler,
		},
		{
			MethodName: "GetCreditCard",
			Handler:    _Gophkeeper_GetCreditCard_Handler,
		},
		{
			MethodName: "DelCreditCard",
			Handler:    _Gophkeeper_DelCreditCard_Handler,
		},
		{
			MethodName: "UpdateCreditCard",
			Handler:    _Gophkeeper_UpdateCreditCard_Handler,
		},
		{
			MethodName: "GetAllCreditCard",
			Handler:    _Gophkeeper_GetAllCreditCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/gophkeeper.proto",
}
