// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MaximkaSha/gophkeeper/internal/models (interfaces: Storager)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	models "github.com/MaximkaSha/gophkeeper/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddCipheredData mocks base method.
func (m *MockStorager) AddCipheredData(arg0 models.CipheredData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCipheredData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCipheredData indicates an expected call of AddCipheredData.
func (mr *MockStoragerMockRecorder) AddCipheredData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCipheredData", reflect.TypeOf((*MockStorager)(nil).AddCipheredData), arg0)
}

// AddUser mocks base method.
func (m *MockStorager) AddUser(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStoragerMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorager)(nil).AddUser), arg0)
}

// DelCiphereData mocks base method.
func (m *MockStorager) DelCiphereData(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelCiphereData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelCiphereData indicates an expected call of DelCiphereData.
func (mr *MockStoragerMockRecorder) DelCiphereData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCiphereData", reflect.TypeOf((*MockStorager)(nil).DelCiphereData), arg0)
}

// GetCipheredData mocks base method.
func (m *MockStorager) GetCipheredData(arg0 string) ([]models.CipheredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCipheredData", arg0)
	ret0, _ := ret[0].([]models.CipheredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCipheredData indicates an expected call of GetCipheredData.
func (mr *MockStoragerMockRecorder) GetCipheredData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCipheredData", reflect.TypeOf((*MockStorager)(nil).GetCipheredData), arg0)
}

// GetUser mocks base method.
func (m *MockStorager) GetUser(arg0 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoragerMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorager)(nil).GetUser), arg0)
}
